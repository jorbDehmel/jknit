
## JKnit Demonstration
### Author LastName

----

## Scope Sharing

```{octave}
% This is a matrix
A = [1, 2, 3; 4, 5, 6; 7, 8, 9]
```

The following Octave code shares the scope of all Octave code which was previously run.
Thus, A exists in scope, and the following produces output.
```{octave}
A
```

----

## Functions in Octave

This is a function definition in Octave.
This chunk is marked with a ^, meaning that
it produces no output.

```{octave}^
function printmatrix (mat)
  disp('The following matrix was inputted:');
  mat
endfunction
```

This is a funciton call in octave.
It uses our matrix from before to demonstrate scoping and function calls.

```{octave}
printmatrix(A)
```

----

## Languages

JKnit also offers native compatibility with C++, Python, bash, JavaScript and Rust.
These must be installed on your machine.

```{bash}
echo "Hello from bash!"
```

\begin{pres}

# Presentations

This section demonstrates .jmd's ability for **presentations**.
This is not the goal, but it also can work.

```{python}
print('Hello from Python!')
```

```{js}
console.log('Hello from JavaScript!');
```

\end{pres}

C++ and Rust are both compiled languages which require main functions.
Thus, it does not make much sense to link multiple chunks together.
By default, they are marked as "loner" chunks via the \* operator in
their name.

```{clangpp*}
#include <iostream>
int main()
{
    std::cout << "Hello from C++!\n";
    return 0;
}
```

```{rust*}
fn main() {
    println!("Hello from Rust!");
}
```

> blockquotes
> are
> very important

- Lists may also exist
- They may
    have multiple lines
    in them
    - They may have nested lists
        a) Even possibly nested
        b) lists of enumerative or
        c) differing
            - types
    - Or go back down
        or even do this
        weird thing
        ```python
        print('Or have code in them')
        ```
    - And then keep going

    - Or have a newline break

Zeroth
- First
    - Second
        - Third
            - Fourth
